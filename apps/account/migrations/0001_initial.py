# Generated by Django 4.1.5 on 2023-02-04 07:45

import apps.account.models.managers.user
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Account",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_date",
                    models.DateTimeField(
                        auto_now=True, help_text="Date account was created."
                    ),
                ),
                (
                    "account_name",
                    models.CharField(help_text="Account Name.", max_length=250),
                ),
                (
                    "bio",
                    models.CharField(
                        help_text="Short description of the account.", max_length=500
                    ),
                ),
                (
                    "contact_email",
                    models.EmailField(
                        help_text="Account Contact Email.", max_length=250
                    ),
                ),
                (
                    "website_link",
                    models.URLField(
                        blank=True,
                        default="",
                        help_text="Website Link.",
                        max_length=250,
                    ),
                ),
                (
                    "facebook_link",
                    models.URLField(
                        blank=True,
                        default="",
                        help_text="Facebook Social Link.",
                        max_length=250,
                    ),
                ),
                (
                    "instagram_link",
                    models.URLField(
                        blank=True,
                        default="",
                        help_text="Instagram Social Link.",
                        max_length=250,
                    ),
                ),
                (
                    "twitter_link",
                    models.URLField(
                        blank=True,
                        default="",
                        help_text="Twitter Social Link.",
                        max_length=250,
                    ),
                ),
                (
                    "tiktok_link",
                    models.URLField(
                        blank=True,
                        default="",
                        help_text="Tiktok Social Link.",
                        max_length=250,
                    ),
                ),
                (
                    "linkedin_link",
                    models.URLField(
                        blank=True,
                        default="",
                        help_text="LinkedIn Social Link.",
                        max_length=250,
                    ),
                ),
                (
                    "snapchat_link",
                    models.URLField(
                        blank=True,
                        default="",
                        help_text="Snapchat Social Link.",
                        max_length=250,
                    ),
                ),
                (
                    "youtube_link",
                    models.URLField(
                        blank=True,
                        default="",
                        help_text="Youtube Social Link.",
                        max_length=250,
                    ),
                ),
                (
                    "twitch_link",
                    models.URLField(
                        blank=True,
                        default="",
                        help_text="Twitch Social Link.",
                        max_length=250,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "username",
                    models.EmailField(
                        error_messages={
                            "unique": "A user with that email already exists."
                        },
                        help_text="Email field is now username",
                        max_length=254,
                        unique=True,
                    ),
                ),
                ("bio", models.TextField(blank=True, default="", max_length=200)),
                (
                    "is_contributor",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user is a contributor to a blog account.",
                    ),
                ),
                (
                    "is_editor",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user is a editor of a blog account.",
                    ),
                ),
                (
                    "is_blog_owner",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user is the blog owner.",
                    ),
                ),
                (
                    "account",
                    models.ForeignKey(
                        help_text="Account user belongs too.",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="account.account",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", apps.account.models.managers.user.UserManager()),
            ],
        ),
    ]
